//complete Interactive C code for demonstrating Flyod's Cycle Algo in O(N); Quite efficient//
#include<stdio.h>
#include<stdlib.h>
typedef struct list{
    int data;
    struct list*next;
}list;
list*head=NULL;
void delete_cycle(list*slow, list*fast){
    while(fast->next!=NULL){
        slow=slow->next;
        fast=fast->next->next;
        if(slow==fast)
        break;
    }
    slow=head;
    list*temp=NULL; //the node just before the fast and the slow pointers meet to giveout start node of cycle//
    while(slow!=fast){
        temp=fast;
        slow=slow->next;
        fast=fast->next;
    }
    temp->next=NULL;
}
int find_startnode(list*slow, list*fast){
    while(fast->next!=NULL){
        slow=slow->next;
        fast=fast->next->next;
        if(slow==fast)
        break;
    }
    slow=head;
    while(slow!=fast){
        slow=slow->next;
        fast=fast->next;
    }
    return slow->data;
}
void create_loop(list*temp_ptr1, list*temp_ptr2, int after_point){
    list*store_last_node;
    while(temp_ptr1!=NULL){
        store_last_node=temp_ptr1;
        temp_ptr1=temp_ptr1->next;
    }
    list* after_point_node;
    int counter=0;
    while(counter!=after_point){
        after_point_node=temp_ptr2;
        temp_ptr2=temp_ptr2->next;
        counter++;
    }
    store_last_node->next=after_point_node;
}
void print_list(list*head){
    while(head!=NULL){
        printf("%d ", head->data);
        head=head->next;
    }
}
void print_upto(list*head, int n){
    int counter=0;
    while(counter!=n){
        printf("%d ", head->data);
        head=head->next;
        counter++;
    }
}
list*create_node(){
    return malloc(sizeof(list));
}
void create_list(int n){
    if(n==0)
    return;
    else{
        int elements;
        printf("Entre Element \n");
        scanf("%d", &elements);
        create_list(n-1);
        list*temp=create_node();
        temp->data=elements;
        temp->next=head;
        head=temp;
    }
}
int main() {
    int n;
    printf("Enter the number of elements you want to have in the linked list: \n");
    scanf("%d", &n);
    create_list(n);
    printf("Printing the Linked List: \n");
    print_list(head);
    printf("\n");
    int position;
    printf("Type in the start node of the Cycle: \n");
    scanf("%d", &position);
    create_loop(head,head,position);
    printf("Printing the linked list to 2n positions: \n");
    print_upto(head,2*n);
    printf("\nSuppose you didnot know the start node of the Cycle, the Flyod's Algo will print it for you: \n");
    printf("The start node is with the value(distinct elements only): %d \n", find_startnode(head,head));
    printf("Deleting the cycle: \n");
    printf("The linked after cycle's deleted: \n");
    delete_cycle(head,head);
    print_list(head);
    return 0;
}
